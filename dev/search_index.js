var documenterSearchIndex = {"docs":
[{"location":"index.html#[Dojo](https://github.com/dojo-sim/Dojo.jl)","page":"Dojo","title":"Dojo","text":"","category":"section"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"A differentiable simulator for robotics","category":"page"},{"location":"index.html#Features","page":"Dojo","title":"Features","text":"","category":"section"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"Maximal-Coordinates Representation\nSmooth Gradients\nOpen Source: Our code is available on GitHub and distributed under the MIT Licence.\nPython Interface: dojopy","category":"page"},{"location":"index.html#Installation","page":"Dojo","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"Dojo can be installed using the Julia package manager for Julia v1.6 and higher. Inside the Julia REPL, type ] to enter the Pkg REPL mode then run","category":"page"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"pkg> add Dojo","category":"page"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"If you want to install the latest version from main run","category":"page"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"pkg> add Dojo#main","category":"page"},{"location":"index.html#Related-talks","page":"Dojo","title":"Related talks","text":"","category":"section"},{"location":"index.html#Credits","page":"Dojo","title":"Credits","text":"","category":"section"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"The following people are involved in the development of Dojo:","category":"page"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"Simon Le Cleac'h (main developement, contact modeling, interior-point solver, gradients)\nTaylor Howell (main developement, contact modeling, interior-point solver, gradients)\nJan Bruedigam (main developemnt, maximal representation and graph-based solver)\nZico Kolter (implicit differentiation)\nZachary Manchester (principal investigator, physics and algorithms)","category":"page"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"*Development by the Robotic Exploration Lab.","category":"page"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"If this project is useful for your work please consider","category":"page"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"Citing the relevant papers\nLeaving a star on the GitHub repository","category":"page"},{"location":"index.html#Licence","page":"Dojo","title":"Licence","text":"","category":"section"},{"location":"index.html","page":"Dojo","title":"Dojo","text":"Dojo.jl is licensed under the MIT License For more details click here.","category":"page"},{"location":"contributing.html#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Contributions are always welcome:","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"If you want to contribute features, bug fixes, etc, please take a look at our Code Style Guide below\nPlease report any issues and bugs that you encounter in Issues\nAs an open source project we are also interested in any projects and applications that use Dojo. Please let us know via email to: thowell@stanford.edu or simonlc@stanford.edu","category":"page"},{"location":"contributing.html#Code-Style-Guide","page":"Contributing","title":"Code Style Guide","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"The code in this repository follows the naming and style conventions of Julia Base with a few modifications. This style guide is heavily \"inspired\" by the guides of John Myles White, JuMP, and COSMO","category":"page"},{"location":"contributing.html#Formatting","page":"Contributing","title":"Formatting","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Use one tab when indenting a new block (except module)\nUse spaces between operators, except for ^, ', and :\nUse single space after commas and semicolons\nDon't use spaces around parentheses, or braces","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Bad: f(x,y) = [5*sin(x+y);y'] Good: f(x, y) = [5 * sin(x + y); y']","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Use spacing with keyword arguments","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Bad: foo(x::Float; y::Integer = 1) Good: foo(x::Float; y::Integer=1)","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Don't parenthesize conditions","category":"page"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Bad: if (a == b) Good: if a == b","category":"page"},{"location":"contributing.html#Naming","page":"Contributing","title":"Naming","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Modules and Type names use capitilization and camel case, e.g. module LinearAlgebra, struct ConvexSets.\nFunctions are lowercase and use underscores to seperate words, e.g. has_key(x), is_valid(y).\nNormal variables are lowercase and use underscores like functions, e.g. convex_set\nConstants are uppercase, e.g. const MY_CONSTANT\nAlways append ! to names of functions that modify their arguments.\nFunction arguments that are mutated come first. Otherwise follow the rules layed out in Julia Base Argument ordering\nFiles are named like functions, e.g. my_new_file.jl","category":"page"},{"location":"contributing.html#Syntax","page":"Contributing","title":"Syntax","text":"","category":"section"},{"location":"contributing.html","page":"Contributing","title":"Contributing","text":"Use 1.0 instead of 1.","category":"page"},{"location":"install.html#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"friction.html#Friction","page":"Friction","title":"Friction","text":"","category":"section"},{"location":"load_mechanism.html#Loading-Mechanism-via-URDF","page":"Loading Mechanism via URDF","title":"Loading Mechanism via URDF","text":"","category":"section"},{"location":"reinforcement_learning.html#Reinforcement-Learning","page":"Reinforcement Learning","title":"Reinforcement Learning","text":"","category":"section"},{"location":"reinforcement_learning.html#Gradient-Free","page":"Reinforcement Learning","title":"Gradient-Free","text":"","category":"section"},{"location":"reinforcement_learning.html#Gradient-Based","page":"Reinforcement Learning","title":"Gradient-Based","text":"","category":"section"},{"location":"gym_env.html#Gym","page":"Gym","title":"Gym","text":"","category":"section"},{"location":"impact.html#Impact","page":"Impact","title":"Impact","text":"","category":"section"},{"location":"impact.html","page":"Impact","title":"Impact","text":"We model hard contact via constraints on the system’s configuration and the applied contact forces. For a system with P contact points, we define a signed-distance function, φ : Z → R P , subject to the following element-wise constraint:","category":"page"},{"location":"quadruped_env.html#Quadruped","page":"Quadruped","title":"Quadruped","text":"","category":"section"},{"location":"classic_env.html#Classic","page":"Classic","title":"Classic","text":"","category":"section"},{"location":"define_mechanism.html#Defining-a-Mechanism","page":"Defining a Mechanism","title":"Defining a Mechanism","text":"","category":"section"},{"location":"minimal_representation.html#Minimal-Coordinates","page":"Minimal Coordinates","title":"Minimal Coordinates","text":"","category":"section"},{"location":"minimal_representation.html","page":"Minimal Coordinates","title":"Minimal Coordinates","text":"Dojo simulates systems in maximal coordinates. ","category":"page"},{"location":"minimal_representation.html","page":"Minimal Coordinates","title":"Minimal Coordinates","text":"For a mechanism with M joints and N bodies, the maximal representation z can be efficiently converted to minimal coordinates: ","category":"page"},{"location":"minimal_representation.html","page":"Minimal Coordinates","title":"Minimal Coordinates","text":"y = (y^(1) dots y^(M)) leftarrow z = (z^(1) dots z^(N)),","category":"page"},{"location":"minimal_representation.html","page":"Minimal Coordinates","title":"Minimal Coordinates","text":"where y^(j) depends on the degree and type of joint. Note: this minimal representation does not stack coordinates followed by velocities, which is a common convention; instead, coordinates and velocities are grouped by joint.","category":"page"},{"location":"minimal_representation.html","page":"Minimal Coordinates","title":"Minimal Coordinates","text":"Each minimal state comprises:","category":"page"},{"location":"minimal_representation.html","page":"Minimal Coordinates","title":"Minimal Coordinates","text":"y = (p_texttranslational p_textrotational w_texttranslational w_textrotational)","category":"page"},{"location":"minimal_representation.html","page":"Minimal Coordinates","title":"Minimal Coordinates","text":"coordinates p and velocities w for both translational and rotational degrees of freedom.","category":"page"},{"location":"minimal_representation.html","page":"Minimal Coordinates","title":"Minimal Coordinates","text":"In the case of a floating-base joint, the minimal-representation orientation is converted to modified Rodrigues parameters from a unit quaternion.","category":"page"},{"location":"trajectory_optimization.html#Trajectory-Optimization","page":"Trajectory Optimization","title":"Trajectory Optimization","text":"","category":"section"},{"location":"define_environment.html#Defining-Environment","page":"Defining Environment","title":"Defining Environment","text":"","category":"section"},{"location":"faq.html#Frequently-Asked-Questions","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"","category":"section"},{"location":"solver_options.html#Solver-Options","page":"Solver Options","title":"Solver Options","text":"","category":"section"},{"location":"define_controller.html#Defining-a-Controller","page":"Defining a Controller","title":"Defining a Controller","text":"","category":"section"},{"location":"api.html#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"Docstrings for Dojo.jl interface members can be accessed through Julia's built-in documentation system or in the list below.","category":"page"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"CurrentModule = Dojo","category":"page"},{"location":"api.html#Contents","page":"API Documentation","title":"Contents","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api.html#Index","page":"API Documentation","title":"Index","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api.html#Mechanism","page":"API Documentation","title":"Mechanism","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"Mechanism\nget_mechanism\ninitialize!\nget_node\nget_body\nget_joint\nget_contact\nget_maximal_state\nget_next_state\nget_minimal_state\nset_maximal_state!\nset_minimal_state!\nset_input!\ninput_dimension","category":"page"},{"location":"api.html#Dojo.Mechanism","page":"API Documentation","title":"Dojo.Mechanism","text":"Mechanism{T}\n\nMulti-rigid-body system. \n\norigin: global reference frame represented with Origin\njoints: list of JointConstraint objects\nbodies: list of Body objects\ncontacts: list of ContactConstraint objects\nsystem: graph-based representation for mechanism\nresidual_entries: containt entries for linear system residual\nmatrix_entries: contains entries for linear system matrix\ndiagonal_inverses: contains inverted matrices computing during LU factorization\ndata_matrix: contains parameter information that is fixed during simulation\nroot_to_leaves: list of node connections traversing from root node to leaves\ntimestep: time discretization\ngravity: force vector resulting from gravitational potential\nμ: complementarity violation (contact softness)\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.get_mechanism","page":"API Documentation","title":"Dojo.get_mechanism","text":"get_mechanism(model; kwargs...)\n\nconstructs mechanism\n\nmodel: Symbol \nkwargs: mechanism specific parameters\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.initialize!","page":"API Documentation","title":"Dojo.initialize!","text":"initialize!(mechanism, model; kwargs)\n\nstate initialization for mechanism \n\nmechanism: Mechanism \nmodel: Symbol \nkwargs: mechanism specific parameters\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.get_node","page":"API Documentation","title":"Dojo.get_node","text":"get_node(mechanism, name) \n\nreturn Node from Mechanism \n\nmechanism: Mechanism \nname: unique identifier for node\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.get_body","page":"API Documentation","title":"Dojo.get_body","text":"get_body(mechanism, name) \n\nreturns Body from Mechanism\n\nmechanism: Mechanism \nname: unique identifier for body\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.get_joint","page":"API Documentation","title":"Dojo.get_joint","text":"get_joint(mechanism, name) \n\nreturn JointConstraint from Mechanism \n\nmechanism: Mechanism \nname: unique identifier for joint\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.get_contact","page":"API Documentation","title":"Dojo.get_contact","text":"get_contact(mechanism, name) \n\nreturns ContactConstraint from Mechanism \n\nmechanism: Mechanism \nname: unique identifier for contact\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.get_maximal_state","page":"API Documentation","title":"Dojo.get_maximal_state","text":"get_maximal_state(mechanism) \n\nreturn the current maximal state of mechanism \n\nmechanism: Mechanism\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.get_next_state","page":"API Documentation","title":"Dojo.get_next_state","text":"get_next_state(mechanism) \n\nreturn the maximal state of mechanism after one simulation step\n\nmechanism: Mechanism\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.get_minimal_state","page":"API Documentation","title":"Dojo.get_minimal_state","text":"get_minimal_state(mechanism) \n\nreturn minimal state for mechanism \n\nmechanism: Mechanism\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.set_maximal_state!","page":"API Documentation","title":"Dojo.set_maximal_state!","text":"set_maximal_state(mechanism, z) \n\nset the maximal state of a mechanism \n\nmechanism: Mechanism \nz: state\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.set_minimal_state!","page":"API Documentation","title":"Dojo.set_minimal_state!","text":"set_minimal_state(mechanism, y) \n\nset the maximal state of a mechanism \n\nmechanism: Mechanism \ny: state\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.set_input!","page":"API Documentation","title":"Dojo.set_input!","text":"set_input(mechanism, u) \n\nset input for each joint in mechanism \n\nmechanism: Mechanism \nu: input\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.input_dimension","page":"API Documentation","title":"Dojo.input_dimension","text":"input_dimension(mechanism) \n\nreturn the number of inputs for mechanism \n\nmechanism: Mechanism\n\n\n\n\n\n","category":"function"},{"location":"api.html#Nodes","page":"API Documentation","title":"Nodes","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"Node\nBody\nOrigin\nConstraint\nShape\nEmptyShape\nMesh\nBox\nCylinder\nCapsule\nSphere\nPyramid\nShapes","category":"page"},{"location":"api.html#Dojo.Node","page":"API Documentation","title":"Dojo.Node","text":"Node{T}\n\nAbstract type for graph node object\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Body","page":"API Documentation","title":"Dojo.Body","text":"Body{T} <: Node{T}\n\nA rigid body object\n\nid: unique identifying number \nname: unique identifying name \nmass: inertial property (kilograms)\ninertia: inertia matrix (kilograms meter^2)\nstate: State; representation of the system's: position, linear velocity, orientation, and angular velocity \nshape: Shape; geometry information about the Body\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Origin","page":"API Documentation","title":"Dojo.Origin","text":"Origin{T} <: Node{T}\n\nGlobal reference frame\n\nid: always 0 \nname: always :origin \nstate: State; defaults to zero values\nshape: Shape; defaults to EmptyShape\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Constraint","page":"API Documentation","title":"Dojo.Constraint","text":"Constraint{T}\n\nAbstract type for graph edge object\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Shape","page":"API Documentation","title":"Dojo.Shape","text":"Shape{T} \n\nAbstract type; Subtypes contain geometric and visual information for a Body.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.EmptyShape","page":"API Documentation","title":"Dojo.EmptyShape","text":"EmptyShape{T} <: Shape{T}\n\nContains no geometric or visual information\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Mesh","page":"API Documentation","title":"Dojo.Mesh","text":"Mesh{T} <: Shape{T}\n\nContains geometric and visual information based on .obj file\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Box","page":"API Documentation","title":"Dojo.Box","text":"Box{T} <: Shape{T}\n\nCuboid geometry \n\nposition_offset: geometry origin offset from center of mass\naxis_offset: orientation offset from body frame\nxyz: dimensions (meters)\nscale: scaling\ncolor: RGBA\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Cylinder","page":"API Documentation","title":"Dojo.Cylinder","text":"Cylinder{T} <: Shape{T}\n\ncylinder geometry \n\nposition_offset: geometry origin offset from center of mass\naxis_offset: orientation offset from body frame\nrh: radius and height dimensions (meters)\nscale: scaling\ncolor: RGBA\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Capsule","page":"API Documentation","title":"Dojo.Capsule","text":"Capsule{T} <: Shape{T}\n\ncapsule geometry \n\nposition_offset: geometry origin offset from center of mass\naxis_offset: orientation offset from body frame\nrh: radius and height dimensions (meters)\nscale: scaling\ncolor: RGBA\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Sphere","page":"API Documentation","title":"Dojo.Sphere","text":"Sphere{T} <: Shape{T}\n\nsphere geometry \n\nposition_offset: geometry origin offset from center of mass\naxis_offset: orientation offset from body frame\nr: radius (meters)\nscale: scaling\ncolor: RGBA\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Pyramid","page":"API Documentation","title":"Dojo.Pyramid","text":"Pyramid{T} <: Shape{T}\n\npyramid geometry \n\nposition_offset: geometry origin offset from center of mass\naxis_offset: orientation offset from body frame\nwh: width and height dimensions (meters)\nscale: scaling\ncolor: RGBA\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Shapes","page":"API Documentation","title":"Dojo.Shapes","text":"Shapes{T} <: Shape{T}\n\ncomposite geometry\n\nshape: list of Shape objects\nposition_offset: geometry origin offset from center of mass\naxis_offset: orientation offset from body frame\nxyz: dimensions (meters)\nscale: scaling\ncolor: RGBA\n\n\n\n\n\n","category":"type"},{"location":"api.html#Joints","page":"API Documentation","title":"Joints","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"Joint\nRotational\nTranslational\nJointConstraint\nFixed\nPrismatic\nPlanar\nFixedOrientation\nRevolute\nCylindrical\nPlanarAxis\nFreeRevolute\nOrbital\nPrismaticOrbital\nPlanarOrbital\nFreeOrbital\nSpherical\nCylindricalFree\nPlanarFree","category":"page"},{"location":"api.html#Dojo.Joint","page":"API Documentation","title":"Dojo.Joint","text":"Joint{T} \n\nAbstract type for 3-dimensional constraint between two Body objects\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Rotational","page":"API Documentation","title":"Dojo.Rotational","text":"Rotational{T} <: Joint{T}\n\nconstraint limiting rotational degrees of freedom\n\naxis: rotation axis in parent offset frame\naxis_mask1: rotation axis mask in pbody's frame\naxis_mask2: rotation axis mask in pbody's frame\naxis_mask3: rotation axis mask in pbody's frame\naxis_offset: rotation axis offset from pbody's frame\nspring :coefficient for joint spring\ndamper: coefficient for joint damper\nspring_offset: nominal joint configuration\njoint_limits: lower and upper limits on the joint configuration\nspring_type: can be :linear or :sinusoidal (currently not implemented), if linear then we need joint_limits to avoid the 360° singularity.\ninput: external impulse torque\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Translational","page":"API Documentation","title":"Dojo.Translational","text":"Translational{T} <: Joint{T}\n\nconstraint limiting translational degrees of freedom\n\naxis: translational axis in parent offset frame\naxis_mask1: translational axis mask in pbody's frame\naxis_mask2: translational axis mask in pbody's frame\naxis_mask3: translational axis mask in pbody's frame\nvertices: points in parent can child frames\nspring: coefficient for joint spring\ndamper: coefficient for joint damper\nspring_offset: nominal joint configuration\njoint_limits: lower and upper limits on the joint configuration\nspring_type: can be :linear or :sinusoidal (currently not implemented), if linear then we need joint_limits to avoid the 360° singularity.\ninput: external impulse force\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.JointConstraint","page":"API Documentation","title":"Dojo.JointConstraint","text":"JointConstraint{T} <: Constraint{T}\n\nconstraint restricting translational and rotational degrees of freedom between two Body objects.\n\nid: a unique identifying number\nname: a unique identifying name\ntranslational: Translational\nrotational: Rotational\nspring: flag for joint springs on\ndamper: flag for joint dampers on\nparent_id: identifying number for parent Body{T}\nchild_id: identifying number for child Body{T}\nminimal_index: indices for minimal coordinates\nimpulses: joint impulses that maintain constraint between two Body{T} objects\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Fixed","page":"API Documentation","title":"Dojo.Fixed","text":"Fixed{T} <: JointConstraint{T}\n\nfixed connection between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.Prismatic","page":"API Documentation","title":"Dojo.Prismatic","text":"Prismatic{T} <: JointConstraint{T}\n\none translational degree of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.Planar","page":"API Documentation","title":"Dojo.Planar","text":"Planar{T} <: JointConstraint{T} \n\ntwo translational degree of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.FixedOrientation","page":"API Documentation","title":"Dojo.FixedOrientation","text":"FixedOrientation{T} <: JointConstraint{T} \n\nthree translational degree of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.Revolute","page":"API Documentation","title":"Dojo.Revolute","text":"Revolute{T} <: JointConstraint{T} \n\none rotational degree of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.Cylindrical","page":"API Documentation","title":"Dojo.Cylindrical","text":"Cylindrical{T} <: JointConstraint{T} \n\none translational and one rotational degree of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.PlanarAxis","page":"API Documentation","title":"Dojo.PlanarAxis","text":"PlanarAxis{T} <: JointConstraint{T} \n\ntwo translational and one rotational degree of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.FreeRevolute","page":"API Documentation","title":"Dojo.FreeRevolute","text":"FreeRevolute{T} <: JointConstraint{T} \n\nfree translation with rotation along one axis\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.Orbital","page":"API Documentation","title":"Dojo.Orbital","text":"Orbital{T} <: JointConstraint{T} \n\ntwo rotational degrees of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.PrismaticOrbital","page":"API Documentation","title":"Dojo.PrismaticOrbital","text":"PrismaticOrbital{T} <: JointConstraint{T} \n\none translational and two rotational degrees of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.PlanarOrbital","page":"API Documentation","title":"Dojo.PlanarOrbital","text":"PlanarOrbital{T} <: JointConstraint{T} \n\ntwo translational and two rotational degrees of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.FreeOrbital","page":"API Documentation","title":"Dojo.FreeOrbital","text":"FreeOrbital{T} <: JointConstraint{T} \n\nthree translational and two rotational degrees of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.Spherical","page":"API Documentation","title":"Dojo.Spherical","text":"Spherical{T} <: JointConstraint{T} \n\nthree rotational degrees of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.CylindricalFree","page":"API Documentation","title":"Dojo.CylindricalFree","text":"CylindricalFree{T} <: JointConstraint{T} \n\none translational and three rotational degrees of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.PlanarFree","page":"API Documentation","title":"Dojo.PlanarFree","text":"PlanarFree{T} <: JointConstraint{T} \n\ntwo translational and three rotational degrees of freedom between two bodies\n\n\n\n\n\n","category":"function"},{"location":"api.html#Contacts","page":"API Documentation","title":"Contacts","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"Contact\nImpactContact\nLinearContact\nNonlinearContact\nContactConstraint","category":"page"},{"location":"api.html#Dojo.Contact","page":"API Documentation","title":"Dojo.Contact","text":"Contact{T,N} \n\nAbstract type contain contact information associated with a parent Body object.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.ImpactContact","page":"API Documentation","title":"Dojo.ImpactContact","text":"ImpactContact{T,N} <: Contact{T,N}\n\ncontact object for impact (i.e., no friction)\n\nsurface_normal_projector: mapping from world frame to surface tangent frame \ncontact_point: position of contact on Body relative to center of mass \noffset: position of contact relative to contact_point\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.LinearContact","page":"API Documentation","title":"Dojo.LinearContact","text":"LinearContact{T,N} <: Contact{T,N}\n\ncontact object for impact and friction with a linearized friction cone\n\nfriction_coefficient: value of friction coefficient\nsurface_projector: mapping from world frame to surface tangent frame \nsurface_normal_projector: inverse/complement of surface_projector\ncontact_point: position of contact on Body relative to center of mass \noffset: position of contact relative to contact_point\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.NonlinearContact","page":"API Documentation","title":"Dojo.NonlinearContact","text":"NonlinearContact{T,N} <: Contact{T,N}\n\ncontact object for impact and friction with a nonlinear friction cone\n\nfriction_coefficient: value of friction coefficient\nsurface_projector: mapping from world frame to surface tangent frame \nsurface_normal_projector: inverse/complement of surface_projector\ncontact_point: position of contact on Body relative to center of mass \noffset: position of contact relative to contact_point\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.ContactConstraint","page":"API Documentation","title":"Dojo.ContactConstraint","text":"ContactConstraint{T} <: Constraint{T}\n\nconstraint containing information for contact node.\n\nid: unique identifying number \nname: unique identifying name \nmodel: type of contact model: ImpactContact, LinearContact, NonlinearContact \nparent_id: identifying number of Body experiencing contact \nchild_id: always 0\nimpulses: contact impulses applied to Body \nimpulses_dual: dual contact impulses, used by solver to enforce correct contact behaviors\n\n\n\n\n\n","category":"type"},{"location":"api.html#Representations","page":"API Documentation","title":"Representations","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"State","category":"page"},{"location":"api.html#Dojo.State","page":"API Documentation","title":"Dojo.State","text":"State{T} \n\nstate information in maximal coordinates for Body at time steps: 1, 2, 3. \ninformation at time step 3 is recovered using configurations at time step 2 and velocities at time step 2.5.\n\nx1: position at previous time step\nq1: orientation (UnitQuaternion) at previous time step \nv15: linear velocity at time step 1.5 (midpoint)\nϕ15: angular velocity at time step 1.5 (midpoint)\n\nx2: position at current time step \nq2: orientation (UnitQuaternion) at current time step \nF2: linear impulse (force * time step) applied at current time step \nτ2: angular impulse (torque * timestep) applied at current time step \n\nvsol: linear velocity at time step 2.5 (midpoint); contains current value (index 1) and candidate value (index 2)\nϕsol: angular velocity at time step 2.5 (midpoint); contains current value (index 1) and candidate value (index 2)\n\nd: implicit dynamics evaluator (zero vector indicates physics are satisfied)\nD: Jacobian of implicit dynamics\n\n\n\n\n\n","category":"type"},{"location":"api.html#Graph","page":"API Documentation","title":"Graph","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"System\nEntry","category":"page"},{"location":"api.html#Dojo.System","page":"API Documentation","title":"Dojo.System","text":"System{N}\n\ngraph structure representing a linear system (\"Ax = b\")\n\nmatrix_entries: matrix entries\nvector_entries: residual entries \ndiagonal_inverses: matrix inverses computed during LU factorization\nacyclic_children: contains direct children that are not part of a cycle\ncyclic_children: contains direct and indirect children that are part of a cycle\nparents: contains direct and cycle-opening parents\ndfs_list: list of graph nodes (depth first)\ngraph: graph object\ndfs_graph: direct graph object\ndimrow: dimensions of row\ndimcol: dimensions of columns\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Entry","page":"API Documentation","title":"Dojo.Entry","text":"Entry{ET}\n\nvalue: data \nisinverted: flag indicating if matrix value has been inverted\n\n\n\n\n\n","category":"type"},{"location":"api.html#Environments","page":"API Documentation","title":"Environments","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"Environment\nSpace\nBoxSpace\nAnt\nAtlas\nBlock\nCartpole\nHalfCheetah\nHopper\nPendulum\nQuadruped\nRexHopper\nWalker\nget_environment\nstep\nget_observation\ncost\nis_done\nreset","category":"page"},{"location":"api.html#Dojo.Environment","page":"API Documentation","title":"Dojo.Environment","text":"Environment{T} \n\nsimulation object containing a mechanism along with additional information useful for \nreinforcement learning and trajectory optimization \n\nmechanism: Mechanism\nrepresentation: :minimal or :maximal state representation\ninput_space: Space, limits on inputs\nobservation_space: Space, limits on observations\nstate: contains current minimal or maximal states\ndynamics_jacobian_state: dynamics Jacobian wrt to state\ndynamics_jacobian_input: dynamics Jacobian wrt to input\ninput_previous: input applied to mechanism at previous time step\ncontrol_mask: mapping for inputs to mechanism translational and rotational dynamics\ncontrol_scaling: scaling for each input\nnum_states: dimension of minimal or maximal state\nnum_inputs: dimension of inputs\nnum_observations: dimension of observation\ninfo: object containing environment specific information\nrng: random number generator\nvis: Visualizer\nopts_step: SolverOptions\nopts_grad: SolverOptions\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Space","page":"API Documentation","title":"Dojo.Space","text":"Space{T,N} \n\nAbstract type for domains\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.BoxSpace","page":"API Documentation","title":"Dojo.BoxSpace","text":"BoxSpace{T,N} <: Environment{T,N}\n\ndomain with lower and upper limits \n\nn: dimension of domain \nlow:: lower limit \nhigh: upper limit \nshape: tuple (n,)\ndtype: type for domain\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Ant","page":"API Documentation","title":"Dojo.Ant","text":"Ant <: Environment\n\nfour-legged insect-like robot, based on https://gym.openai.com/envs/Ant-v2/\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Atlas","page":"API Documentation","title":"Dojo.Atlas","text":"Atlas <: Environment\n\nhumanoid robot designed by Boston Dynamics (v5)\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Block","page":"API Documentation","title":"Dojo.Block","text":"Block\n\nrigid body with fully actuation\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Cartpole","page":"API Documentation","title":"Dojo.Cartpole","text":"Cartpole <: Environment\n\nclassic system with one translational (cart) and one rotational (pole) degree of freedom\nhttps://underactuated.mit.edu/acrobot.html#cart_pole\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.HalfCheetah","page":"API Documentation","title":"Dojo.HalfCheetah","text":"HalfCheetah <: Environment\n\nplanar cheetah-like robot, based on https://gym.openai.com/envs/HalfCheetah-v2/\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Hopper","page":"API Documentation","title":"Dojo.Hopper","text":"Hopper <: Environment\n\nplanar hopping robot, based on https://gym.openai.com/envs/Hopper-v2/\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Pendulum","page":"API Documentation","title":"Dojo.Pendulum","text":"Pendulum <: Environment\n\nclassic system with one rotational degree of freedom\nhttps://underactuated.mit.edu/pend.html\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Quadruped","page":"API Documentation","title":"Dojo.Quadruped","text":"Quadruped <: Environment\n\nfour-legged dog-like robot \nhttps://www.unitree.com/products/a1/\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.Walker","page":"API Documentation","title":"Dojo.Walker","text":"Walker <: Environment\n\nplanar bipedal robot, based on: https://gym.openai.com/envs/Walker2d-v2/\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.get_environment","page":"API Documentation","title":"Dojo.get_environment","text":"get_environment(model; kwargs...)\n\nconstruct existing environment \n\nmodel: String, name of of environment \nkwargs: environment specific parameters\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.step","page":"API Documentation","title":"Dojo.step","text":"step(env, x, u; diff)\n\nsimulates environment one time step \n\nenv: Environment \nx: state \nu: input \ndiff: flag for computing gradients of dynamics\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.get_observation","page":"API Documentation","title":"Dojo.get_observation","text":"get_observation(env) \n\nreturn observation for current state \n\nenv: Environment\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.cost","page":"API Documentation","title":"Dojo.cost","text":"cost(env, x, u) \n\nreturn cost (-reward) for current state and input\n\nenv: Environment\nx: state \nu: input\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.is_done","page":"API Documentation","title":"Dojo.is_done","text":"is_done(env) \n\ncheck for termination of simulation\n\nenv: Environment\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.reset","page":"API Documentation","title":"Dojo.reset","text":"reset(env; x) \n\nreturns environment to nominal state\n\nenv: Environment\nx: state\n\n\n\n\n\n","category":"function"},{"location":"api.html#Simulate","page":"API Documentation","title":"Simulate","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"    Storage\n    step!\n    simulate!","category":"page"},{"location":"api.html#Dojo.Storage","page":"API Documentation","title":"Dojo.Storage","text":"Storage{T,N}\n\ncontains maximal-representation trajectories\n\nx: position \nq: orientation (UnitQuaternion)\nv: linear velocity (midpoint) \nω: angular velocity (midpoint)\npx: linear momentum\npq: angular momentum \nvl: linear velocity\nωl: angular velocity\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.step!","page":"API Documentation","title":"Dojo.step!","text":"step!(mechanism::Mechanism{T}, z::Vector{T}, u::Vector{T}; opts)\n\nsimulate mechanism for one time step\n\nmechanism: Mechanism\nz: maximal state \nu: inputs\nopts: SolverOptions\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.simulate!","page":"API Documentation","title":"Dojo.simulate!","text":"simulate!(mechanism, steps, storage, control!;\n    record, verbose, abort_upon_failure, opts)\n\nsimulate a mechanism\n\nmechanism: Mechanism \nsteps: range of steps to simulate \nstorage: Storage\ncontrol!: Function setting inputs for mechanism\nrecord: flag for recording simulation to storage\nverbose: flag for printing during simulation \nabort_upon_failure: flag for terminating simulation is solver fails to meet tolerances\nopts: SolverOptions\n\n\n\n\n\n","category":"function"},{"location":"api.html#Gradients","page":"API Documentation","title":"Gradients","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"get_maximal_gradients!\nget_minimal_gradients!","category":"page"},{"location":"api.html#Dojo.get_maximal_gradients!","page":"API Documentation","title":"Dojo.get_maximal_gradients!","text":"get_maximal_gradients!(mechanism, z, u; opts) \n\nreturn maximal gradients for mechanism \nnote: this requires simulating the mechanism for one time step\n\nmechanism: Mechanism\nz: state \nu: input\nopts: SolverOptions\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.get_minimal_gradients!","page":"API Documentation","title":"Dojo.get_minimal_gradients!","text":"get_minimal_gradients!(mechanism, z, u; opts) \n\nreturn minimal gradients for mechanism \nnote: this requires simulating the mechanism for one time step\n\nmechanism: Mechanism\ny: state \nu: input\nopts: SolverOptions\n\n\n\n\n\n","category":"function"},{"location":"api.html#Solver","page":"API Documentation","title":"Solver","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"SolverOptions\nmehrotra!","category":"page"},{"location":"api.html#Dojo.SolverOptions","page":"API Documentation","title":"Dojo.SolverOptions","text":"SolverOptions{T}\n\nOptions and tolerances of primal-dual interior point solver.\n\nrtol - defaults to 1e-6 - tolerance on residual violations (equality constraints)\nbtol - defaults to 1e-3 - tolerance on bilinear violations (complementarity constraints)\nls_scale - defaults to 0.5 - line search scaling factor (α_new ← ls_scale * α_current)\nmax_iter - defaults to 50 - maximum number of Newton iterations\nmax_ls - defaults to 10 - maximum number of line search steps\nundercut - defaults to Inf - complementarity slackness target; solver will aim at reaching complementarity violation = btol / undercut\nno_progress_max - defaults to 3 - number of Newton's iterations without progress trigerring the rescaling of the target complementarity violation\nno_progress_undercut - defaults to 10 - undercut scaling factor (target_new ← target_current / no_progress_undercut)\nverbose - defaults to false - flag for printing the status of the solver during the solve\n\n\n\n\n\n","category":"type"},{"location":"api.html#Dojo.mehrotra!","page":"API Documentation","title":"Dojo.mehrotra!","text":"mehrotra!(mechanism; opts)\n\ninterior-point solver for simulation feasibility problem\n\nmechanism: Mechanism\nopts: SolverOptions\n\n\n\n\n\n","category":"function"},{"location":"api.html#Visualization","page":"API Documentation","title":"Visualization","text":"","category":"section"},{"location":"api.html","page":"API Documentation","title":"API Documentation","text":"visualize\nbuild_robot\nset_robot\nset_camera!\nset_light!\nset_surface!\nset_floor!","category":"page"},{"location":"api.html#Dojo.visualize","page":"API Documentation","title":"Dojo.visualize","text":"visualize(mechanism, storage; vis, build, show_contact, animation, color, name)\n\nvisualize mechanism using trajectory from storage \n\nmechansim: Mechanism \nstorage: Storage \nvis: Visualizer \nbuild: flag to construct mechanism visuals (only needs to be built once)\nshow_contact: flag to show contact locations on system \ncolor: RGBA \nname: unique identifier for mechanism\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.build_robot","page":"API Documentation","title":"Dojo.build_robot","text":"build_robot(mechanism; vis, show_contact, name, color)\n\nconstruct visuals for mechanism \n\nmechanism: Mechanism \nvis: Visualizer \nshow_contact: flag to show contact locations on mechanism \nname: unique identifier \ncolor: RGBA\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.set_robot","page":"API Documentation","title":"Dojo.set_robot","text":"set_robot(vis, mechanism, z; show_contact, name)\n\nvisualze mechanism configuration from maximal representation \n\nvis: Visualizer \nmechanism: Mechanism \nz: maximal state \nshow_contact: flag to show contact locations on mechanism \nname: unique identifier\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.set_camera!","page":"API Documentation","title":"Dojo.set_camera!","text":"set_camera!(vis; zoom, cam_pos)\n\nposition and zoom for camera in visualization\n\nvis: Visualizer \nzoom: value for zoom \ncam_pos: position of camera\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.set_light!","page":"API Documentation","title":"Dojo.set_light!","text":"set_light!(vis; ambient, fill, pointX, pointXshadow, direction)\n\nlighting conditions for visualization\n\nvis: Visualizer \nambient: value for ambient lighting \ndirection: positive or negative direction for light\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.set_surface!","page":"API Documentation","title":"Dojo.set_surface!","text":"set_surface!(vis; f, xlims, ylims, color, n)\n\nadds surface to visualization \n\nvis::Visualizer \nf: implicit function representing surface \nxlims: lateral domain for surface \nylims: longitudinal domain for surface \ncolor: RGBA \nn: number of discretization points along each domain\n\n\n\n\n\n","category":"function"},{"location":"api.html#Dojo.set_floor!","page":"API Documentation","title":"Dojo.set_floor!","text":"set_floor!(vis; x, y, z, alt, color, tilepermeter, imagename, axis, grid)\n\nadds floor to visualization \n\nvis::Visualizer \nx: lateral position \ny: longitudinal position \nz: vertical position \nalt:: altitude \ncolor: RGBA \ntilepermeter: scaling \nimagename: path to image  \naxis: flag to turn on visualizer axis \ngrid: flag to turn on visualizer grid\n\n\n\n\n\n","category":"function"},{"location":"define_simulation.html#Defining-a-Simulation","page":"Defining a Simulation","title":"Defining a Simulation","text":"","category":"section"},{"location":"simulation.html#Simulation","page":"Simulation","title":"Simulation","text":"","category":"section"},{"location":"load_environment.html#Load-Existing-Environment","page":"Load Existing Environment","title":"Load Existing Environment","text":"","category":"section"},{"location":"interior_point.html#Algorithm","page":"Algorithm","title":"Algorithm","text":"","category":"section"},{"location":"system_identification.html#System-Identification","page":"System Identification","title":"System Identification","text":"","category":"section"},{"location":"gradients.html#Gradients","page":"Gradients","title":"Gradients","text":"","category":"section"},{"location":"get_started.html#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"rexhopper_env.html#REx-Hopper","page":"REx Hopper","title":"REx Hopper","text":"","category":"section"},{"location":"maximal_representation.html#Maximal-Coordinates","page":"Maximal Coordinates","title":"Maximal Coordinates","text":"","category":"section"},{"location":"maximal_representation.html","page":"Maximal Coordinates","title":"Maximal Coordinates","text":"The i-th body in a mechanism with N bodies has state:  ","category":"page"},{"location":"maximal_representation.html","page":"Maximal Coordinates","title":"Maximal Coordinates","text":"z^(i) = (x^(i) v^(i) q^(i) omega^(i)) in mathbfR^3 times mathbfR^3 times mathbfH times mathbfR^3,  ","category":"page"},{"location":"maximal_representation.html","page":"Maximal Coordinates","title":"Maximal Coordinates","text":"represented in maximal coordinates, where mathbfH is the space of unit quaternions. ","category":"page"},{"location":"maximal_representation.html","page":"Maximal Coordinates","title":"Maximal Coordinates","text":"x: position in world frame\nv: linear velocity in the world frame\nq: orientation represented as a unit quaternion\nomega: angular velocity in the body frame","category":"page"},{"location":"maximal_representation.html","page":"Maximal Coordinates","title":"Maximal Coordinates","text":"The mechanism state:   ","category":"page"},{"location":"maximal_representation.html","page":"Maximal Coordinates","title":"Maximal Coordinates","text":"z = (z^(1) dots z^(N)).","category":"page"},{"location":"maximal_representation.html","page":"Maximal Coordinates","title":"Maximal Coordinates","text":"is the concatentation of all body states.","category":"page"},{"location":"mechanism_interfaces.html#Interfaces","page":"Interfaces","title":"Interfaces","text":"","category":"section"},{"location":"notations.html#Notations","page":"Notations","title":"Notations","text":"","category":"section"},{"location":"notations.html#General-notations","page":"Notations","title":"General notations","text":"","category":"section"},{"location":"notations.html","page":"Notations","title":"Notations","text":"O is the origin of the frame\nCA is the center of mass of body A\nPA is a point attached to body A\n_W corresponds to the world frame\n_A corresponds to the A frame \nCA_W is the center of mass of body A expressed in the world frame ","category":"page"},{"location":"notations.html#Body-notations","page":"Notations","title":"Body notations","text":"","category":"section"},{"location":"notations.html","page":"Notations","title":"Notations","text":"Body A's state is represented by ","category":"page"},{"location":"notations.html","page":"Notations","title":"Notations","text":"x = CA_W 3 dimensional position of the center of mass of body A expressed in the world frame W.\nv = V(CA, A / W)_W 3 dimensional velocity of the CA attached to body A with respect to the world frame W expressed in the world frame W.\nq = RWA quaternion representing the rotation from body A' frame to the world frame W, e.g. PW = RWA * PA. RWA is the matrix form of q.\nphi = Omega(A/W)_A angular velocity of body A with respect to the world frame, expressed in body A's frame.","category":"page"},{"location":"atlas_env.html#Atlas","page":"Atlas","title":"Atlas","text":"","category":"section"},{"location":"citing.html#Citing","page":"Citing","title":"Citing","text":"","category":"section"},{"location":"citing.html","page":"Citing","title":"Citing","text":"If you find Dojo useful in your project, we kindly request that you cite the following paper:","category":"page"},{"location":"citing.html","page":"Citing","title":"Citing","text":"@article{howell2022dojo,\n\ttitle={Dojo: {A} {D}ifferentiable {S}imulator for {R}obotics},\n\tauthor={Howell, Taylor A. and Le Cleac'h, Simon and and Kolter, J. Zico and Schwager, Mac and Manchester, Zachary},\n\tyear={2022}\n}","category":"page"},{"location":"citing.html","page":"Citing","title":"Citing","text":"A preprint can be downloaded from arXiv.","category":"page"},{"location":"control.html#Control","page":"Control","title":"Control","text":"","category":"section"}]
}
